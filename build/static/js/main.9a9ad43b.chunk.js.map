{"version":3,"sources":["Icon/hot.svg","Icon/sun.svg","Icon/moon.svg","Icon/sunny.gif","Icon/drizzle.gif","Icon/fog.gif","Icon/rain.gif","Icon/snow.gif","Icon/thunderstorm.gif","Icon/cloud.gif","components/Weather/index.jsx","components/SearchCity/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Weather","prop","min","max","city","country","temp_celsius","temp_min","temp_max","description","weatherIcon","sunrise","sunset","className","src","alt","Hot","class","Sunrise","Sunset","SearchCity","props","onSubmit","useState","setCity","setCountry","event","preventDefault","formValue","console","log","type","name","placeholder","onChange","target","value","App","undefined","main","celsius","error","weather","setWeather","setWeatherIcon","getWeatherIcon","rangedId","Thunderstorm","Drizzle","Rain","Snow","Fog","Sunny","Cloud","filters","setfilters","url","calCelsius","temp","Math","floor","convertUnixTime","unix_timestamp","date","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","substr","useEffect","axios","get","then","response","res","data","sys","icon","id","formValues","newWeather","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9a9ad43b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hot.16dc53df.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.da20b792.svg\";","module.exports = __webpack_public_path__ + \"static/media/moon.d93f330c.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunny.944cec9c.gif\";","module.exports = __webpack_public_path__ + \"static/media/drizzle.a904382b.gif\";","module.exports = __webpack_public_path__ + \"static/media/fog.7f8b4eb4.gif\";","module.exports = __webpack_public_path__ + \"static/media/rain.290b94a4.gif\";","module.exports = __webpack_public_path__ + \"static/media/snow.ce87bbc4.gif\";","module.exports = __webpack_public_path__ + \"static/media/thunderstorm.6d6ebbe2.gif\";","module.exports = __webpack_public_path__ + \"static/media/cloud.80b4978f.gif\";","import React from 'react';\nimport './Weather.scss';\nimport Hot from '../../Icon/hot.svg';\nimport Sunrise from '../../Icon/sun.svg';\nimport Sunset from '../../Icon/moon.svg';\n\n\nfunction Weather(prop) {\n    const {city, country, temp_celsius, temp_min, temp_max, description, weatherIcon, sunrise, sunset} = prop;\n    return (\n        <div className=\"container weather\">\n            <div className=\"cards pt-4\">\n                <h1>{city}, {country}</h1>\n                <div className=\"py-2\">\n                    <img className=\"icon-weather\" src={weatherIcon} alt=\"error\"/>\n                </div>\n                <img className=\"elsius\" src={Hot} alt=\"error\"/>\n                <h1 className=\"py-2\">{temp_celsius}&deg;</h1>\n            </div>\n            {\n                minmaxTemp(temp_min,temp_max)\n            }\n            <span className=\"px-4\"><img className=\"sunrise\" src={Sunrise} alt=\"error\"/> {sunrise}</span>\n            <span className=\"px-4\"><img className=\"sunset\" src={Sunset} alt=\"error\"/> {sunset}</span>\n\n            <h4 className=\"py-3\">{description}</h4>\n        </div>\n    );\n    \n\n    function minmaxTemp(min,max){\n        return(\n            <h3>\n                <span className=\"px-4\"><i class=\"wi wi-direction-down\"></i> {min}&deg;</span>\n                <span className=\"px-4\"><i class=\"wi wi-direction-up\"></i> {max}&deg;</span>\n            </h3>\n        );\n    }\n}\n\nexport default Weather;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchCity.scss';\n\nSearchCity.propTypes = {\n    \n};\n\nfunction SearchCity(props) {\n    const {onSubmit} = props;\n    const [city, setCity] = useState('')\n    const [country, setCountry] = useState('')\n\n    function handleCity(event){\n        setCity(event.target.value);\n    }\n\n    function handleCountry(event){\n        setCountry(event.target.value);\n    }\n\n    function handleSubmit(event){\n        //prevent reloading browser \n        event.preventDefault();\n        if(!onSubmit) return;\n        //co the them nhieu fill vao object de submit\n        const formValue = {\n            city,\n            country\n        };\n        console.log(formValue);\n        onSubmit(formValue);\n\n        //reset form\n        setCity('');\n        setCountry('');\n    }\n    return (\n        <div className=\"container search-city\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"row\">\n                    <div className=\"col-md-3 offset-md-2\">\n                        <input \n                            type=\"text\" \n                            className=\"form-input\"\n                            name=\"city\"\n                            placeholder=\"City...\"\n                            onChange={handleCity}\n                        />\n                    </div>\n                    <div className=\"col-md-3\">\n                        <input \n                            type=\"text\" \n                            className=\"form-input\"\n                            name=\"country\"\n                            placeholder=\"Country...\"\n                            onChange={handleCountry}\n                        />\n                    </div>\n                    <div className=\"col-md-3 mt-md-0 text-md-left\">\n                        <button className=\"btn btn-warning\">Get Weather</button>\n                    </div>\n                </div>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchCity;","import React, { useState, useEffect} from 'react';\nimport './App.scss';\nimport Weather from './components/Weather';\nimport axios from 'axios';\n\nimport Sunny from './Icon/sunny.gif';\nimport Drizzle from './Icon/drizzle.gif';\nimport Fog from './Icon/fog.gif';\nimport Rain from './Icon/rain.gif';\nimport Snow from './Icon/snow.gif';\nimport Thunderstorm from './Icon/thunderstorm.gif';\nimport Cloud from './Icon/cloud.gif';\nimport SearchCity from './components/SearchCity';\n\n\nfunction App() {\n  const [weather, setWeather] = useState({\n    city: undefined,\n    country: undefined,\n    main: undefined,\n    celsius: undefined,\n    temp_max: undefined,\n    temp_min: undefined,\n    description: \"\",\n    sunrise: undefined,\n    sunset: undefined,\n    error: false,\n    \n  })\n  const [weatherIcon, setWeatherIcon] = useState(undefined)\n\n\n  //   Thunderstorm: \"wi-thunderstorm\",\n  //   Drizzle: \"wi-sleet\",\n  //   Rain: \"wi-storm-showers\",\n  //   Snow: \"wi-snow\",\n  //   Atmosphere: \"wi-fog\",\n  //   Clear: \"wi-day-sunny\",\n  //   Clouds: \"we-day-fog\"\n\n  \n  function getWeatherIcon(rangedId){\n    switch(true){\n      case rangedId >= 200 && rangedId <= 232:\n        setWeatherIcon(Thunderstorm);\n        break;\n      case rangedId >= 300 && rangedId <= 321:\n        setWeatherIcon(Drizzle);\n        break;\n      case rangedId >= 500 && rangedId <= 531:\n        setWeatherIcon(Rain);\n        break;\n      case rangedId >= 600 && rangedId <= 622:\n        setWeatherIcon(Snow);\n        break;\n      case rangedId >= 701 && rangedId <= 781:\n        setWeatherIcon(Fog);\n        break;\n      case rangedId === 800:\n        setWeatherIcon(Sunny);\n        break;\n      case rangedId >= 801 && rangedId <= 804:\n        setWeatherIcon(Cloud);\n        break;\n    }\n  }\n\n  // const [city, setCity] = useState('Ho Chi Minh City');\n  // const [country, setCountry] = useState ('VN');\n  const [filters, setfilters] = useState({\n    city: 'Ho Chi Minh City',\n    country: 'VN'\n  })\n\n  console.log(\"filters first:\", filters);\n  const apiKey = \"5187a02a880134c8ffc05e49bfa3cfdf\"\n  let url = \"http://api.openweathermap.org/data/2.5/weather?q=\" + filters.city + ',' + filters.country + \"&appid=\" + apiKey;\n\n  useEffect(() => {\n      axios.get(url)\n        .then((response) => {\n          const res = response.data;\n          setWeather({\n            city: res.name,\n            country: res.sys.country,\n            celsius: calCelsius(res.main.temp),\n            temp_max: calCelsius(res.main.temp_max),\n            temp_min: calCelsius(res.main.temp_min),\n            description: res.weather[0].description,\n            icon: getWeatherIcon(res.weather[0].id),\n            sunrise: convertUnixTime(res.sys.sunrise),\n            sunset: convertUnixTime(res.sys.sunset)\n          })\n        })\n  }, [filters.city]);\n\n  function calCelsius(temp){\n    let cell = Math.floor(temp - 273.15);\n    return cell;\n  }\n\n  function convertUnixTime(unix_timestamp){\n    var date = new Date(unix_timestamp * 1000);\n    var hours = date.getHours();\n    var minutes = \"0\" + date.getMinutes();\n    var seconds = \"0\" + date.getSeconds();\n    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\n    return formattedTime;\n  }\n\n  function handleFormSubmit(formValues){\n    const newWeather = {\n      ...formValues,\n    }\n    setfilters(newWeather);\n    console.log(\"set weather:\",newWeather);\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchCity onSubmit={handleFormSubmit}/>\n      <Weather \n        city={weather.city} \n        country={weather.country}\n        temp_celsius={weather.celsius}\n        temp_max={weather.temp_max}\n        temp_min={weather.temp_min}\n        description={weather.description}\n        weatherIcon={weatherIcon}\n        sunrise={weather.sunrise}\n        sunset={weather.sunset}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'weather-icons/css/weather-icons.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}